#pragma once

#include <string>

/**
 * This class represents a node in your AVL.
 * DO NOT EDIT THIS FILE!
 */
template<typename T>
class AVLNode {
private:
    using Node = AVLNode<T>;

    T data;
    
    Node* left;
    Node* right;

    size_t height;
    int balanceFactor;

public:
    // constructor
    AVLNode(T data)
        : data(data)
        , left(nullptr)
        , right(nullptr)
        , height(0)
        , balanceFactor(0)
    { }

    /*
        getter methods
    */
    T getData() const { return data; }
    Node* getLeft() const { return left; }
    Node* getRight() const { return right; }
    size_t getHeight() const { return height; }
    int getBalanceFactor() const { return balanceFactor; }

    /*
        setter methods
    */
    void setData(T data) { this->data = data; }
    void setLeft(Node* newNode) { left = newNode; }
    void setRight(Node* newNode) { right = newNode; }
    void setHeight(size_t height) { this->height = height; }
    void setBalanceFactor(int balanceFactor) { this->balanceFactor = balanceFactor; }

    // misc
    std::string toString() const
    {
        return "Node containing " + std::to_string(data) + " (height: " + std::to_string(height) +
            ", bf: " + std::to_string(balanceFactor) + ")\n";
    }
};